// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/barpav/demography/internal/rest/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateNewPersonDataV1 provides a mock function with given fields: ctx, data
func (_m *Storage) CreateNewPersonDataV1(ctx context.Context, data *models.EnrichedPersonDataV1) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.EnrichedPersonDataV1) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePersonData provides a mock function with given fields: ctx, id
func (_m *Storage) DeletePersonData(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnrichedPersonDataV1 provides a mock function with given fields: ctx, id
func (_m *Storage) EnrichedPersonDataV1(ctx context.Context, id int64) (*models.EnrichedPersonDataV1, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.EnrichedPersonDataV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.EnrichedPersonDataV1, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.EnrichedPersonDataV1); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EnrichedPersonDataV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchResultV1 provides a mock function with given fields: ctx, filters
func (_m *Storage) SearchResultV1(ctx context.Context, filters *models.SearchFilters) (*models.SearchResultV1, error) {
	ret := _m.Called(ctx, filters)

	var r0 *models.SearchResultV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SearchFilters) (*models.SearchResultV1, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.SearchFilters) *models.SearchResultV1); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SearchResultV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.SearchFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePersonDataV1 provides a mock function with given fields: ctx, id, data
func (_m *Storage) UpdatePersonDataV1(ctx context.Context, id int64, data *models.EditedPersonDataV1) error {
	ret := _m.Called(ctx, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *models.EditedPersonDataV1) error); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
